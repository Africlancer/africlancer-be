# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  profileID: String
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  refreshToken: [String!]
  roles: [String!]
}

type Project {
  _id: String!
  title: String!
  budget: Float!
  summary: String!
  details: String!
  startDate: DateTime!
  endDate: DateTime!
  projectId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Qualification {
  _id: String!
  title: String
  conferringOrganization: String
  summary: String
  startYear: Float
  profileId: String!
}

type Experience {
  _id: String!
  title: String
  company: String
  startMonth: String
  startYear: Float
  endMonth: String
  endYear: Float
  working: Boolean
  summary: String
  profileId: String!
}

type Publication {
  _id: String!
  title: String
  publisher: String
  summary: String
  profileId: String!
}

type Education {
  _id: String!
  country: String
  insitution: String
  degree: String
  startYear: Float
  endYear: Float
  profileId: String!
}

type Profile {
  _id: String!
  userID: String!
  avatar: String
  banner: String
  location: String
  hourlyRate: Float
  professionalHeadline: String
  summary: String
  recommendations: Float
  createdAt: DateTime
  updatedAt: DateTime
  education: [Education!]
  experience: [Experience!]
  qualification: [Qualification!]
  publication: [Publication!]
}

type Portfolio {
  _id: String!
  title: String!
  summary: String!
  url: String!
  stack: String!
}

type Details {
  _id: String
  profileID: String
  firstName: String
  lastName: String
  email: String
  username: String
  refreshToken: [String!]
  roles: [String!]
  name: String!
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  details: Details!
}

type Tokens {
  access_token: String!
  refresh_token: String!
}

type Query {
  findOneUser: User!
  findUsers(query: QueryUserInput!): [User!]!
  findOneProject(query: QueryProjectInput!): Project!
  findProjects(query: QueryProjectInput!): [Project!]!
  deleteProject(_id: String!): Boolean!
  findOneProfile: Profile!
  findProfiles(query: QueryProfileInput!): [Profile!]!
  findOnePortfolio(query: QueryPortfolioInput!): Portfolio!
  findPortfolios(query: QueryPortfolioInput!): [Portfolio!]!
  deletePortfolio(_id: String!): Boolean!
  deleteUser: Boolean!
}

input QueryUserInput {
  profileID: String
  firstName: String
  lastName: String
  email: String
  username: String
}

input QueryProjectInput {
  title: String
  budget: Float
  summary: String
  details: String
  startDate: DateTime
  endDate: DateTime
}

input QueryProfileInput {
  _id: String
  userID: String
  avatar: String
  banner: String
  location: String
  hourlyRate: Float
  professionalHeadline: String
  summary: String
  recommendations: Float
  education: [EducationInput!]
}

input EducationInput {
  _id: String
  country: String
  insitution: String
  degree: String
  startYear: Float
  endYear: Float
}

input QueryPortfolioInput {
  title: String
  summary: String
  url: String
  stack: String
}

type Mutation {
  updateUser(user: QueryUserInput!): Boolean!
  createProject(project: CreateProjectInput!): Project!
  updateProject(_id: String!, project: QueryProjectInput!): Boolean!
  updateProfile(profile: QueryProfileInput!): Boolean!
  addOrUpdateEducation(education: EducationInput!): Boolean!
  deleteEducation(educationID: String!): Boolean!
  addOrUpdateExperience(experience: ExperienceInput!): Boolean!
  deleteExperience(experienceID: String!): Boolean!
  addOrUpdateQualification(qualification: QualificationInput!): Boolean!
  deleteQualification(qualificationID: String!): Boolean!
  addOrUpdatePublication(publication: PublicationInput!): Boolean!
  deletePublication(publicationID: String!): Boolean!
  createPortfolio(portfolio: CreatePortfolioInput!): Portfolio!
  updatePortfolio(_id: String!, portfolio: QueryPortfolioInput!): Boolean!
  userSignUp(user: UserSignUp!): User!
  userSignIn(user: UserSignIn!): LoginResponse!
  userSignOut: Boolean!
  userChangePassword(resetData: UserChangePassword!): Boolean!
  getNewTokens: Tokens!
  userResetPassword(email: String!): Boolean!
}

input CreateProjectInput {
  title: String!
  budget: Float!
  summary: String!
  details: String!
  startDate: DateTime!
  endDate: DateTime!
}

input ExperienceInput {
  _id: String
  title: String
  company: String
  startMonth: String
  startYear: Float
  endMonth: String
  endYear: Float
  working: Boolean
  summary: String
}

input QualificationInput {
  _id: String
  title: String
  conferringOrganization: String
  summary: String
  startYear: Float
}

input PublicationInput {
  _id: String
  title: String
  publisher: String
  summary: String
}

input CreatePortfolioInput {
  title: String!
  summary: String!
  url: String!
  stack: String!
}

input UserSignUp {
  firstName: String!
  lastName: String!
  email: String!
  username: String
  password: String!
  roles: [String!]
}

input UserSignIn {
  username: String!
  password: String!
}

input UserChangePassword {
  oldPassword: String!
  newPassword: String!
}