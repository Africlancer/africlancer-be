# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Bookmark {
  _id: String!
  userID: String!
  projectID: String!
}

type BookmarkPageResult {
  totalRecords: Float!
  data: [Bookmark!]!
}

type User {
  _id: String!
  profileID: String
  walletID: String
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  refreshToken: [String!]
  roles: [String!]
}

type Details {
  _id: String
  profileID: String
  walletID: String
  firstName: String
  lastName: String
  email: String
  username: String
  refreshToken: [String!]
  roles: [String!]
  name: String!
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  details: Details!
}

type Tokens {
  access_token: String!
  refresh_token: String!
}

type FileUploadObject {
  _id: ID
  public_id: String
  format: String
  resource_type: FileUploadType
  bytes: Float
  url: String!
  secure_url: String!
}

enum FileUploadType {
  IMAGE
  VIDEO
  RAW
}

type Qualification {
  _id: String!
  title: String
  conferringOrganization: String
  summary: String
  startYear: Float
  profileId: String!
}

type Experience {
  _id: String!
  title: String
  company: String
  startMonth: String
  startYear: Float
  endMonth: String
  endYear: Float
  working: Boolean
  summary: String
  profileId: String!
}

type Publication {
  _id: String!
  title: String
  publisher: String
  summary: String
  profileId: String!
}

type Education {
  _id: String!
  country: String
  insitution: String
  degree: String
  startYear: Float
  endYear: Float
  profileId: String!
}

type Review {
  _id: String!
  type: ReviewType!
  rating: Float!
  summary: String!
  profileId: String!
  reviewerId: String!
  projectId: String!
}

enum ReviewType {
  CLIENT
  FREELANCER
}

type Profile {
  _id: String!
  userID: String!
  avatar: FileUploadObject
  banner: FileUploadObject
  location: String
  hourlyRate: Float
  professionalHeadline: String
  summary: String
  recommendations: Float
  createdAt: DateTime
  updatedAt: DateTime
  education: [Education!]
  experience: [Experience!]
  qualification: [Qualification!]
  publication: [Publication!]
  review: [Review!]
  skills: [String!]
  clientRating: Float!
  freelancerRating: Float!
  flagURL: String!
  fullName: String
  minRate: Float
  maxRate: Float
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProfilePageResult {
  totalRecords: Float!
  data: [Profile!]!
}

type Project {
  _id: String!
  userId: String
  title: String!
  minBudget: Float!
  maxBudget: Float!
  summary: String!
  details: String!
  startDate: DateTime
  endDate: DateTime
  projectId: String
  status: ProjectStatus
  type: ProjectType!
  totalBids: Float
  averageBid: Float
  skills: [String!]!
  files: [FileUploadObject!]!
  user: User!
}

enum ProjectStatus {
  BIDDING_OPEN
  BIDDING_CLOSE
  COMPLETED
  ONGOING
}

enum ProjectType {
  FIXED_PRICE
  HOURLY_RATE
}

type ProjectPageResult {
  totalRecords: Float!
  data: [Project!]!
}

type Wallet {
  _id: ID!
  userId: ID!
  balance: Float
  total_amount_spent: Float
  total_amount_topup: Float
  createdAt: Float
  updatedAt: Float
  user: User!
  profile: Profile!
}

type WalletTransaction {
  _id: ID!
  userId: String!
  walletId: String!
  transactionId: String
  amount: Float
  balanceBefore: Float
  balanceAfter: Float
  status: WalletTransactionStatusType
  createdAt: Float
  updatedAt: Float
  user: User!
  profile: Profile!
  wallet: Wallet!
}

enum WalletTransactionStatusType {
  PENDING
  PAID
  WITHDRAW
}

type WalletTransactionPageResult {
  totalRecords: Float!
  data: [WalletTransaction!]!
}

type Portfolio {
  _id: String!
  title: String!
  summary: String!
  url: String!
  stack: String!
}

type PortfolioPageResult {
  totalRecords: Float!
  data: [Portfolio!]!
}

type Bid {
  _id: String!
  userID: String!
  projectID: String!
  proposal: String!
  isAwarded: Boolean
  budget: Float
  hourlyRate: Float
  deliveredIn: Float!
  user: User!
  profile: Profile!
}

type BidPageResult {
  totalRecords: Float!
  data: [Bid!]!
}

type ProjectNotification {
  _id: ID!
  projectId: ID!
  createdAt: Float
}

type ProjectNotificationPageResult {
  totalRecords: Float!
  data: [ProjectNotification!]!
}

type Query {
  findBookmark(bookmark: QueryBookMarkInput!): [Bookmark!]!
  deleteBookmark(_id: String!): Boolean!
  bookmarkPage(query: QueryBookMarkInput!, page: BookmarkPageInput!): BookmarkPageResult!
  deleteUser: Boolean!
  findOneUser: User!
  findUsers(query: QueryUserInput!): [User!]!
  findOneProfile: Profile!
  findProfiles(query: QueryProfileInput!): [Profile!]!
  findProfilesFilter(query: QueryProfileInput!, fullSearch: Boolean!): [Profile!]!
  profilePage(query: QueryProfileInput!, fullSearch: Boolean!, page: ProfilePageInput!): ProfilePageResult!
  findOneProject(query: QueryProjectInput!): Project!
  findProjectsFilter(query: QueryProjectInput!, fullSearch: Boolean!): [Project!]!
  findProjects(query: QueryProjectInput!): [Project!]!
  deleteProject: Boolean!
  deleteProjectFile(projectId: String!, fileId: String!, publicId: String!): Boolean!
  projectPage(query: QueryProjectInput!, fullSearch: Boolean!, page: ProjectPageInput!): ProjectPageResult!
  findWallet(query: QueryWalletInput!): [Wallet!]!
  findWalletById(id: String!): Wallet!
  findWalletTransaction(query: QueryWalletTransactionInput!): [WalletTransaction!]!
  findWalletTransactionById(id: String!): WalletTransaction!
  walletTransactionPage(query: WalletTransactionInput!, page: WalletTransactionPageInput!): WalletTransactionPageResult!
  findOnePortfolio(query: QueryPortfolioInput!): Portfolio!
  findPortfolios(query: QueryPortfolioInput!): [Portfolio!]!
  deletePortfolio(_id: String!): Boolean!
  portfolioPage(query: QueryPortfolioInput!, page: PortfolioPageInput!): PortfolioPageResult!
  findBids(query: QueryBidInput!): [Bid!]!
  findOneBid(query: QueryBidInput!): Bid!
  totalBids(projectId: String!): Float!
  averageBids(projectId: String!): Float!
  bidPage(query: QueryBidInput!, page: BidPageInput!): BidPageResult!
  findOneProjectNotification(notification: QueryProjectNotificationInput!): ProjectNotification!
  findProjectNotifications(notification: QueryProjectNotificationInput!): [ProjectNotification!]!
  projectNotificationPage(query: QueryProjectNotificationInput!, page: ProjectNotificationPageInput!): ProjectNotificationPageResult!
}

input QueryBookMarkInput {
  userID: String
  projectID: String
}

input BookmarkPageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

input QueryUserInput {
  profileID: String
  walletID: String
  firstName: String
  lastName: String
  email: String
  username: String
}

input QueryProfileInput {
  _id: String
  userID: String
  avatar: Upload
  banner: Upload
  location: String
  hourlyRate: Float
  professionalHeadline: String
  summary: String
  recommendations: Float
  skills: [String!]
  fullName: String
  clientRating: Float
  freelancerRating: Float
  flagURL: String
  minRate: Float
  maxRate: Float
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProfilePageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

input QueryProjectInput {
  userId: String
  title: String
  minBudget: Float
  maxBudget: Float
  summary: String
  details: String
  startDate: DateTime
  endDate: DateTime
  type: ProjectType
  totalBids: Float
  averageBid: Float
  skills: [String!]
  files: [Upload!]
  _id: String
}

input ProjectPageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

input QueryWalletInput {
  _id: ID
  userId: ID
  balance: Float
  total_amount_spent: Float
  total_amount_topup: Float
}

input QueryWalletTransactionInput {
  userId: String
  walletId: String
  transactionId: String
  balance: Float
  amount: Float
  balanceBefore: Float
  balanceAfter: Float
  status: WalletTransactionStatusType
}

input WalletTransactionInput {
  amount: Float!
  walletId: String!
}

input WalletTransactionPageInput {
  skip: Float!
  take: Float!
  userId: String
  walletId: String
  keyword: String
}

input QueryPortfolioInput {
  title: String
  summary: String
  url: String
  stack: String
}

input PortfolioPageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

input QueryBidInput {
  userID: String
  projectID: String
  proposal: String
  budget: Float
  hourlyRate: Float
  deliveredIn: Float
  isAwarded: Boolean
}

input BidPageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

input QueryProjectNotificationInput {
  _id: ID
  projectId: ID
}

input ProjectNotificationPageInput {
  skip: Float!
  limit: Float!
  keyword: String
}

type Mutation {
  createBookmark(bookmark: CreateBookmarkInput!): Bookmark!
  updateBookmark(_id: String!, bookmark: QueryBookMarkInput!): Boolean!
  userSignUp(user: UserSignUp!): User!
  userSignIn(user: UserSignIn!): LoginResponse!
  userSignOut: Boolean!
  userChangePassword(resetData: UserChangePassword!): Boolean!
  getNewTokens: Tokens!
  userResetPassword(email: String!): Boolean!
  updateUser(user: QueryUserInput!): Boolean!
  updateProfile(profile: QueryProfileInput!): Boolean!
  addOrUpdateEducation(education: EducationInput!): Boolean!
  deleteEducation(educationID: String!): Boolean!
  addOrUpdateExperience(experience: ExperienceInput!): Boolean!
  deleteExperience(experienceID: String!): Boolean!
  addOrUpdateQualification(qualification: QualificationInput!): Boolean!
  deleteQualification(qualificationID: String!): Boolean!
  addOrUpdatePublication(publication: PublicationInput!): Boolean!
  deletePublication(publicationID: String!): Boolean!
  reviewProfile(revieweeID: String!, projectID: String!, review: ReviewInput!): Boolean!
  deleteReview(reviewID: String!, revieweeID: String!): Boolean!
  createProject(project: CreateProjectInput!): Project!
  updateProject(id: String!, project: QueryProjectInput!): Boolean!
  uploadFile(upload: UploadFileInput!): Boolean!
  uploadFiles(upload: UploadFileInput!): [FileUploadObject!]!
  createWallet(wallet: CreateWalletInput!): Wallet!
  updateWallet(id: String!, wallet: UpdateWalletInput!): Wallet!
  deleteWallet(query: QueryWalletInput!): Boolean!
  createWalletTransaction(wallet: CreateWalletTransactionInput!): WalletTransaction!
  updateWalletTransaction(id: String!, wallet: UpdateWalletTransactionInput!): WalletTransaction!
  deleteWalletTransaction(query: QueryWalletTransactionInput!): Boolean!
  walletTopup(transaction: WalletTransactionInput!): WalletTransaction!
  walletWithdraw(transaction: WalletTransactionInput!): WalletTransaction!
  createPortfolio(portfolio: CreatePortfolioInput!): Portfolio!
  updatePortfolio(_id: String!, portfolio: QueryPortfolioInput!): Boolean!
  createBid(bid: CreateBidInput!): Bid!
  updateBid(id: String!, bid: QueryBidInput!): Boolean!
  deleteBid(id: String!): Boolean!
  awardBid(projectId: String!, bidId: String!): Boolean!
  unawardBid(projectId: String!, bidId: String!): Boolean!
  createProjectNotification(notification: CreateProjectNotificationInput!): ProjectNotification!
}

input CreateBookmarkInput {
  userID: String!
  projectID: String!
}

input UserSignUp {
  firstName: String!
  lastName: String!
  email: String!
  username: String
  password: String!
  roles: [String!]
}

input UserSignIn {
  username: String!
  password: String!
}

input UserChangePassword {
  oldPassword: String!
  newPassword: String!
}

input EducationInput {
  _id: String
  country: String
  insitution: String
  degree: String
  startYear: Float
  endYear: Float
}

input ExperienceInput {
  _id: String
  title: String
  company: String
  startMonth: String
  startYear: Float
  endMonth: String
  endYear: Float
  working: Boolean
  summary: String
}

input QualificationInput {
  _id: String
  title: String
  conferringOrganization: String
  summary: String
  startYear: Float
}

input PublicationInput {
  _id: String
  title: String
  publisher: String
  summary: String
}

input ReviewInput {
  _id: String
  type: ReviewType
  rating: Float
  summary: String
  profileId: String
  reviewerId: String
  projectId: String
}

input CreateProjectInput {
  userId: String
  title: String!
  minBudget: Float!
  maxBudget: Float!
  summary: String!
  details: String!
  startDate: DateTime
  endDate: DateTime
  type: ProjectType!
  skills: [String!]!
  files: [Upload!]
}

input UploadFileInput {
  upload: Upload
  uploads: [Upload!]
}

input CreateWalletInput {
  userId: String!
}

input UpdateWalletInput {
  _id: ID
  userId: ID
  balance: Float
  total_amount_spent: Float
  total_amount_topup: Float
}

input CreateWalletTransactionInput {
  userId: String!
  walletId: String!
  transactionId: String
  amount: Float!
}

input UpdateWalletTransactionInput {
  userId: String
  walletId: String
  transactionId: String
  balance: Float
  amount: Float
  balanceBefore: Float
  balanceAfter: Float
  status: WalletTransactionStatusType
}

input CreatePortfolioInput {
  title: String!
  summary: String!
  url: String!
  stack: String!
}

input CreateBidInput {
  userID: String
  projectID: String!
  proposal: String!
  budget: Float
  hourlyRate: Float
  deliveredIn: Float!
}

input CreateProjectNotificationInput {
  projectId: ID!
}

type Subscription {
  newProjectCreated: ProjectNotification!
}